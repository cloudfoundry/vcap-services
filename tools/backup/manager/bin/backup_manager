#!/usr/bin/env ruby
# Copyright (c) 2009-2011 VMware, Inc.

ENV["BUNDLE_GEMFILE"] ||= File.join(File.dirname(__FILE__), "..", "Gemfile")

require "rubygems"
require "bundler/setup"
require "set"
require "logger"

once = false
daemon = false
config_file = File.join(File.dirname(__FILE__), "..", "config", "backup_manager.yml")

OptionParser.new do |opts|
  opts.banner = "Usage: backup_manager [options]"
  opts.on("-c", "--config [ARG]", "Configuration File") do |opt|
    config_file = opt
  end
  opts.on("-d", "--[no-]daemon", "Run as a daemon") do |opt|
    daemon = opt
  end
  opts.on("-o", "--once", "Run once") do |opt|
    once = opt
  end
  opts.on("-h", "--help", "Help") do
    puts opts
    exit
  end
end.parse!

begin
  config = YAML.load_file(config_file)
rescue => e
  raise "Could not read configuration file:  #{e}"
end

def parse_property(hash, key, type, options = {})
  obj = hash[key]
  if obj.nil?
    raise "Missing required option: #{key}" unless options[:optional]
    nil
  elsif type == Range
    raise "Invalid Range object: #{obj}" unless obj.kind_of?(Hash)
    first, last = obj["first"], obj["last"]
    raise "Invalid Range object: #{obj}" unless first.kind_of?(Integer) and last.kind_of?(Integer)
    Range.new(first, last)
  else
    raise "Invalid #{type} object: #{obj}" unless obj.kind_of?(type)
    obj
  end
end

logger = Logger.new(parse_property(config, "log_file", String, :optional => true) || STDOUT, "daily")
logger.level = case (parse_property(config, "log_level", String, :optional => true) || "INFO")
  when "DEBUG" then Logger::DEBUG
  when "INFO" then Logger::INFO
  when "WARN" then Logger::WARN
  when "ERROR" then Logger::ERROR
  when "FATAL" then Logger::FATAL
  else Logger::UNKNOWN
end

DEFAULT_ROTATION_MAX_DAYS = 7
rotation = parse_property(config, "rotation", Hash, :optional => true) || Hash.new
rotation||={}
rotation=rotation.inject({}){|m,(k,v)| m[k.to_sym]=v;m}
rotation[:max_days]||=DEFAULT_ROTATION_MAX_DAYS

DEFAULT_WAKEUP_INTERVAL = 60*60 # one hour

options = {
  :once => once,
  :daemon => daemon,
  :logger => logger,
  :root => parse_property(config, "root", String),
  :wakeup_interval => parse_property(config, "wakeup_interval", Integer, :optional => true) || DEFAULT_WAKEUP_INTERVAL,
  :rotation => rotation,
  :enable => parse_property(config, "enable", Object, :optional => true) || false
}

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), "..", "lib")
require 'backup_manager/manager'

VCAP::Services::Backup::Manager.new(options).start
