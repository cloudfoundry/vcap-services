#!/usr/bin/env ruby
# Copyright (c) 2009-2011 VMware, Inc.

ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../../Gemfile", __FILE__)
require 'bundler/setup'
require 'vcap_services_base'

$:.unshift(File.expand_path("../../lib", __FILE__))
require "mongodb_service/mongodb_node"

class VCAP::Services::MongoDB::Backup < VCAP::Services::Base::Backup

  include VCAP::Services::MongoDB

  def default_config_file
    File.join(File.dirname(__FILE__), '..', 'config', 'mongodb_backup.yml')
  end

  def backup_db
    # make sure local_db exists
    unless File.exist? @config['local_db'].split(':')[1]
      echo "Could not find local_db: #{@config['local_db']}",true
      return 1
    end

    cmd_timeout = @config['timeout'].to_f
    config = VCAP.symbolize_keys(@config)

    Node::ProvisionedService.init(config)

    Node::ProvisionedService.all.each do |p_service|
      path = get_dump_path(p_service.name)

      command = p_service.d_dump(path)
      on_err = Proc.new do |cmd, code, msg|
        echo "CMD '#{cmd}' exit with code: #{code}. Message: #{msg}",true
        cleanup(path)
      end
      res = CMDHandle.execute(command, cmd_timeout, on_err)
      echo "#{command} result: #{res}", !res

      # Delete system.user.bson
      command = "find #{path} -name system.users.bson -exec rm -f '{}' \\;"
      res = CMDHandle.execute(command, cmd_timeout)
      echo "#{command} result: #{res}", !res

      raise Interrupt, "Interrupted" if @shutdown
    end
    0
  end

  def cleanup(path)
    FileUtils.rm_rf(path) if path
  end
end

VCAP::Services::MongoDB::Backup.new.start

