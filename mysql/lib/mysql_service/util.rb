# Copyright (c) 2009-2011 VMware, Inc.
require "mysql"

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', '..', '..', 'base', 'lib')
require "base/backup"

module VCAP
  module Services
    module Mysql
      module Util
        VALID_CREDENTIAL_CHARACTERS = ("A".."Z").to_a + ("a".."z").to_a + ("0".."9").to_a

        def generate_credential(length=12)
          Array.new(length) { VALID_CREDENTIAL_CHARACTERS[rand(VALID_CREDENTIAL_CHARACTERS.length)] }.join
        end

        def make_logger
          return @logger if @logger
          @logger = Logger.new( STDOUT)
          @logger.level = Logger::DEBUG
          @logger
        end

        def fmt_error(e)
          "#{e}: [#{e.backtrace.join(" | ")}]"
        end

        # dump a single database to the given path
        #  db: the name of the database you want to dump
        #  mysql_config: hash contains following keys:
        #    host, port, user, password and socket as optional
        #  dump_file_path: full file path for dump file
        #  opts : other_options
        #    mysqldump_bin: path of mysqldump binary if not in PATH
        #    gzip_bin: path of gzip binary if not in PATH
        #
        def dump_database(db, mysql_config, dump_file_path, opts={})
          raise ArgumentError, "Missing options." unless db && mysql_config && dump_file_path
          make_logger
          host, user, password, port, socket =  %w{host user pass port socket}.map { |opt| mysql_config[opt] }
          mysql_dump_bin = opts[:mysqldump_bin] || "mysqldump"
          gzip_bin = opts[:gzip_bin] || "gzip"

          socket_str = "-S #{socket}"
          cmd = "#{mysql_dump_bin} -h#{host} -u#{user} -p#{password} -P#{port} #{socket_str if socket} --single-transaction #{db}| #{gzip_bin} - > #{dump_file_path}"
          @logger.info("Take snapshot command:#{cmd}")

          on_err = Proc.new do |cmd, code, msg|
            raise "CMD '#{cmd}' exit with code: #{code}. Message: #{msg}"
          end
          res = CMDHandle.execute(cmd, nil, on_err)
          res
        rescue => e
          @logger.error("Error dump db #{db}: #{fmt_error(e)}")
          nil
        end

        # import data from the dumpfile generated by dump_database
        #  db: the name of the database you want to import
        #  mysql_config: hash contains following keys:
        #    host, port, user, password and socket as optional
        #  dump_file_path: full file path for dump file
        #  opts : other_options
        #    mysql_bin: path of mysql binary if not in PATH
        #    gzip_bin: path of gzip binary if not in PATH
        #
        def import_dumpfile(db, mysql_config, dump_file_path, opts={})
          raise ArgumentError, "Missing options." unless db && mysql_config && dump_file_path
          make_logger
          host, user, password, port, socket =  %w{host user pass port socket}.map { |opt| mysql_config[opt] }
          mysql_bin = opts[:mysql_bin] || "mysql"
          gzip_bin = opts[:gzip_bin] || "gzip"

          @connection = ::Mysql.real_connect(host, user, password, 'mysql', port.to_i, socket) unless @connection
          @connection.query("use mysql")
          revoke_privileges(db)

          # rebuild database to remove all tables in old db.
          kill_database_session(db)
          @connection.query("DROP DATABASE #{db}")
          @connection.query("CREATE DATABASE #{db}")

          socket_str = "-S #{socket}"
          cmd = "#{gzip_bin} -dc #{dump_file_path}| #{mysql_bin} -h#{host} -P#{port} -u#{user} -p#{password} #{socket_str if socket} #{db}"
          @logger.info("Rollback snapshot cmd: #{cmd}")
          on_err = Proc.new do |cmd, code, msg|
            raise "CMD '#{cmd}' exit with code: #{code}. Message: #{msg}"
          end
          res = CMDHandle.execute(cmd, nil, on_err)
          res
        rescue => e
          @logger.error("Failed in import dumpfile to instance #{db}: #{fmt_error(e)}")
          nil
        ensure
          restore_privileges(db) if @connection
        end

        protected
        def revoke_privileges(name)
          @connection.query("UPDATE db SET insert_priv='N', create_priv='N', update_priv='N', lock_tables_priv='N' WHERE Db='#{name}'")
          @connection.query("FLUSH PRIVILEGES")
        end

        def restore_privileges(name)
          @connection.query("UPDATE db SET insert_priv='Y', create_priv='Y', update_priv='Y', lock_tables_priv='Y' WHERE Db='#{name}'")
          @connection.query("FLUSH PRIVILEGES")
        end

        def kill_database_session(database)
          @logger.info("Kill all sessions connect to db: #{database}")
          process_list = @connection.list_processes
          process_list.each do |proc|
            thread_id, user, _, db, command, time, _, info = proc
            if (db == database) and (user != "root")
              @connection.query("KILL #{thread_id}")
              @logger.info("Kill session: user:#{user} db:#{db}")
            end
          end
        end
      end
    end
  end
end
